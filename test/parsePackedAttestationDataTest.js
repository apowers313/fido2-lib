"use strict";

const parser = require("../lib/parser");
var assert = require("chai").assert;
const h = require("fido2-helpers");
const abEqual = h.functions.abEqual;

describe("parseAttestationObject (packed)", function() {
  it("parser is object", function() {
    assert.isObject(parser);
  });

  it("has correct helper", function() {
    assert.isObject(h.lib.makeCredentialAttestationPackedResponse);
  });

  var ret = parser.parseAttestationObject(
    h.lib.makeCredentialAttestationPackedResponse.response.attestationObject
  );
  it("parser returns Map with correct size", function() {
    assert.instanceOf(ret, Map);
    assert.strictEqual(ret.size, 15);
  });

  it("is 'packed' fmt", function() {
    assert.strictEqual(ret.get("fmt"), "packed");
  });

  it("has correct alg", function() {
    var alg = ret.get("alg");
    assert.isObject(alg);
    assert.strictEqual(Object.keys(alg).length, 2);
    assert.strictEqual(alg.algName, "ECDSA_w_SHA256");
    assert.strictEqual(alg.hashAlg, "SHA256");
  });

  it("has x5c", function() {
    var x5c = ret.get("x5c");
    assert.isArray(x5c);
    assert.strictEqual(x5c.length, 2);
    assert.instanceOf(x5c[0], ArrayBuffer);
    assert.strictEqual(x5c[0].byteLength, 511);
    assert.instanceOf(x5c[1], ArrayBuffer);
    assert.strictEqual(x5c[1].byteLength, 476);

    var expectedX5c0 = new Uint8Array([
      0x30,
      0x82,
      0x01,
      0xfb,
      0x30,
      0x82,
      0x01,
      0xa0,
      0xa0,
      0x03,
      0x02,
      0x01,
      0x02,
      0x02,
      0x10,
      0x15,
      0x9f,
      0x7b,
      0xc2,
      0xcd,
      0x89,
      0x18,
      0xf1,
      0x28,
      0x6b,
      0x93,
      0x48,
      0xfa,
      0x9f,
      0x33,
      0xe1,
      0x30,
      0x0a,
      0x06,
      0x08,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x04,
      0x03,
      0x02,
      0x30,
      0x4b,
      0x31,
      0x0b,
      0x30,
      0x09,
      0x06,
      0x03,
      0x55,
      0x04,
      0x06,
      0x13,
      0x02,
      0x43,
      0x4e,
      0x31,
      0x1d,
      0x30,
      0x1b,
      0x06,
      0x03,
      0x55,
      0x04,
      0x0a,
      0x0c,
      0x14,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x54,
      0x65,
      0x63,
      0x68,
      0x6e,
      0x6f,
      0x6c,
      0x6f,
      0x67,
      0x69,
      0x65,
      0x73,
      0x31,
      0x1d,
      0x30,
      0x1b,
      0x06,
      0x03,
      0x55,
      0x04,
      0x03,
      0x0c,
      0x14,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x46,
      0x49,
      0x44,
      0x4f,
      0x20,
      0x52,
      0x6f,
      0x6f,
      0x74,
      0x20,
      0x43,
      0x41,
      0x30,
      0x20,
      0x17,
      0x0d,
      0x31,
      0x38,
      0x30,
      0x34,
      0x31,
      0x30,
      0x30,
      0x30,
      0x30,
      0x30,
      0x30,
      0x30,
      0x5a,
      0x18,
      0x0f,
      0x32,
      0x30,
      0x33,
      0x38,
      0x30,
      0x34,
      0x30,
      0x39,
      0x32,
      0x33,
      0x35,
      0x39,
      0x35,
      0x39,
      0x5a,
      0x30,
      0x49,
      0x31,
      0x0b,
      0x30,
      0x09,
      0x06,
      0x03,
      0x55,
      0x04,
      0x06,
      0x13,
      0x02,
      0x43,
      0x4e,
      0x31,
      0x1d,
      0x30,
      0x1b,
      0x06,
      0x03,
      0x55,
      0x04,
      0x0a,
      0x0c,
      0x14,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x54,
      0x65,
      0x63,
      0x68,
      0x6e,
      0x6f,
      0x6c,
      0x6f,
      0x67,
      0x69,
      0x65,
      0x73,
      0x31,
      0x1b,
      0x30,
      0x19,
      0x06,
      0x03,
      0x55,
      0x04,
      0x03,
      0x0c,
      0x12,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x46,
      0x49,
      0x44,
      0x4f,
      0x32,
      0x20,
      0x43,
      0x41,
      0x2d,
      0x31,
      0x30,
      0x59,
      0x30,
      0x13,
      0x06,
      0x07,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x02,
      0x01,
      0x06,
      0x08,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x03,
      0x01,
      0x07,
      0x03,
      0x42,
      0x00,
      0x04,
      0x8e,
      0x7e,
      0x60,
      0x09,
      0xec,
      0xc1,
      0x16,
      0x65,
      0xcc,
      0xa0,
      0xfa,
      0xc3,
      0xe9,
      0x6f,
      0xe5,
      0x08,
      0x3b,
      0x95,
      0x6d,
      0x57,
      0x25,
      0x11,
      0xeb,
      0x5b,
      0x32,
      0xf4,
      0xd6,
      0x67,
      0x39,
      0x57,
      0xdd,
      0x67,
      0xd8,
      0xb6,
      0x17,
      0x35,
      0x1d,
      0xff,
      0x4b,
      0xb9,
      0x80,
      0xe6,
      0x0b,
      0xa9,
      0xb9,
      0x33,
      0xb9,
      0x9a,
      0x34,
      0x30,
      0xf3,
      0x17,
      0xea,
      0x21,
      0x13,
      0x07,
      0x56,
      0xbd,
      0x6a,
      0x07,
      0x74,
      0xde,
      0x75,
      0x8f,
      0xa3,
      0x66,
      0x30,
      0x64,
      0x30,
      0x1d,
      0x06,
      0x03,
      0x55,
      0x1d,
      0x0e,
      0x04,
      0x16,
      0x04,
      0x14,
      0x4d,
      0x3b,
      0xd8,
      0xc4,
      0x67,
      0x15,
      0x1b,
      0xbb,
      0x13,
      0xe8,
      0xf3,
      0x84,
      0xd8,
      0x30,
      0x4f,
      0x9d,
      0x69,
      0x15,
      0xc0,
      0x83,
      0x30,
      0x1f,
      0x06,
      0x03,
      0x55,
      0x1d,
      0x23,
      0x04,
      0x18,
      0x30,
      0x16,
      0x80,
      0x14,
      0xd1,
      0xa1,
      0x98,
      0x4d,
      0x81,
      0x7f,
      0xc3,
      0xb9,
      0x6b,
      0xf6,
      0x07,
      0x67,
      0xbd,
      0x50,
      0x12,
      0xfe,
      0x90,
      0x45,
      0xf1,
      0x54,
      0x30,
      0x12,
      0x06,
      0x03,
      0x55,
      0x1d,
      0x13,
      0x01,
      0x01,
      0xff,
      0x04,
      0x08,
      0x30,
      0x06,
      0x01,
      0x01,
      0xff,
      0x02,
      0x01,
      0x00,
      0x30,
      0x0e,
      0x06,
      0x03,
      0x55,
      0x1d,
      0x0f,
      0x01,
      0x01,
      0xff,
      0x04,
      0x04,
      0x03,
      0x02,
      0x01,
      0x06,
      0x30,
      0x0a,
      0x06,
      0x08,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x04,
      0x03,
      0x02,
      0x03,
      0x49,
      0x00,
      0x30,
      0x46,
      0x02,
      0x21,
      0x00,
      0xfb,
      0x7f,
      0xa3,
      0xd2,
      0x40,
      0x47,
      0xa1,
      0x11,
      0x50,
      0xc2,
      0x78,
      0x56,
      0x6d,
      0x21,
      0xcc,
      0x90,
      0x16,
      0x98,
      0xec,
      0xa1,
      0x7f,
      0x4f,
      0x3b,
      0x48,
      0x34,
      0x53,
      0x79,
      0xca,
      0x60,
      0xe4,
      0xc2,
      0x65,
      0x02,
      0x21,
      0x00,
      0xeb,
      0x0a,
      0x43,
      0xc1,
      0x88,
      0xc1,
      0xd7,
      0xbd,
      0x88,
      0x3e,
      0x91,
      0x24,
      0x60,
      0x56,
      0xc2,
      0xb0,
      0xb9,
      0x5b,
      0x58,
      0xa2,
      0x74,
      0x6f,
      0x0b,
      0x9f,
      0x3c,
      0xa9,
      0x1c,
      0x29,
      0x2d,
      0x2b,
      0x59,
      0xec
    ]).buffer;

    var expectedX5c1 = new Uint8Array([
      0x30,
      0x82,
      0x01,
      0xd8,
      0x30,
      0x82,
      0x01,
      0x7e,
      0xa0,
      0x03,
      0x02,
      0x01,
      0x02,
      0x02,
      0x10,
      0x15,
      0x9f,
      0x7b,
      0xc2,
      0xcd,
      0x89,
      0x18,
      0xf1,
      0x28,
      0x6b,
      0x93,
      0x48,
      0xfa,
      0x9f,
      0x33,
      0xd6,
      0x30,
      0x0a,
      0x06,
      0x08,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x04,
      0x03,
      0x02,
      0x30,
      0x4b,
      0x31,
      0x0b,
      0x30,
      0x09,
      0x06,
      0x03,
      0x55,
      0x04,
      0x06,
      0x13,
      0x02,
      0x43,
      0x4e,
      0x31,
      0x1d,
      0x30,
      0x1b,
      0x06,
      0x03,
      0x55,
      0x04,
      0x0a,
      0x0c,
      0x14,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x54,
      0x65,
      0x63,
      0x68,
      0x6e,
      0x6f,
      0x6c,
      0x6f,
      0x67,
      0x69,
      0x65,
      0x73,
      0x31,
      0x1d,
      0x30,
      0x1b,
      0x06,
      0x03,
      0x55,
      0x04,
      0x03,
      0x0c,
      0x14,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x46,
      0x49,
      0x44,
      0x4f,
      0x20,
      0x52,
      0x6f,
      0x6f,
      0x74,
      0x20,
      0x43,
      0x41,
      0x30,
      0x20,
      0x17,
      0x0d,
      0x31,
      0x38,
      0x30,
      0x34,
      0x30,
      0x31,
      0x30,
      0x30,
      0x30,
      0x30,
      0x30,
      0x30,
      0x5a,
      0x18,
      0x0f,
      0x32,
      0x30,
      0x34,
      0x38,
      0x30,
      0x33,
      0x33,
      0x31,
      0x32,
      0x33,
      0x35,
      0x39,
      0x35,
      0x39,
      0x5a,
      0x30,
      0x4b,
      0x31,
      0x0b,
      0x30,
      0x09,
      0x06,
      0x03,
      0x55,
      0x04,
      0x06,
      0x13,
      0x02,
      0x43,
      0x4e,
      0x31,
      0x1d,
      0x30,
      0x1b,
      0x06,
      0x03,
      0x55,
      0x04,
      0x0a,
      0x0c,
      0x14,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x54,
      0x65,
      0x63,
      0x68,
      0x6e,
      0x6f,
      0x6c,
      0x6f,
      0x67,
      0x69,
      0x65,
      0x73,
      0x31,
      0x1d,
      0x30,
      0x1b,
      0x06,
      0x03,
      0x55,
      0x04,
      0x03,
      0x0c,
      0x14,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x46,
      0x49,
      0x44,
      0x4f,
      0x20,
      0x52,
      0x6f,
      0x6f,
      0x74,
      0x20,
      0x43,
      0x41,
      0x30,
      0x59,
      0x30,
      0x13,
      0x06,
      0x07,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x02,
      0x01,
      0x06,
      0x08,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x03,
      0x01,
      0x07,
      0x03,
      0x42,
      0x00,
      0x04,
      0x9d,
      0xf0,
      0x0a,
      0x6e,
      0x3b,
      0xcc,
      0x5f,
      0x51,
      0x32,
      0xd5,
      0xbe,
      0xa4,
      0xf9,
      0x64,
      0x10,
      0x74,
      0xd5,
      0x4c,
      0xb7,
      0xd2,
      0x60,
      0x19,
      0x6c,
      0x89,
      0xdc,
      0xfb,
      0xcc,
      0xe0,
      0x14,
      0x8a,
      0xe5,
      0x7a,
      0x93,
      0x7e,
      0x8f,
      0xbe,
      0xd2,
      0x80,
      0x23,
      0xff,
      0x8b,
      0x67,
      0xc3,
      0x22,
      0x0b,
      0xd0,
      0x71,
      0x41,
      0x47,
      0xd4,
      0xad,
      0xfa,
      0x4b,
      0x63,
      0xa9,
      0x25,
      0xc3,
      0x7e,
      0x38,
      0x97,
      0x02,
      0xea,
      0xec,
      0xf3,
      0xa3,
      0x42,
      0x30,
      0x40,
      0x30,
      0x1d,
      0x06,
      0x03,
      0x55,
      0x1d,
      0x0e,
      0x04,
      0x16,
      0x04,
      0x14,
      0xd1,
      0xa1,
      0x98,
      0x4d,
      0x81,
      0x7f,
      0xc3,
      0xb9,
      0x6b,
      0xf6,
      0x07,
      0x67,
      0xbd,
      0x50,
      0x12,
      0xfe,
      0x90,
      0x45,
      0xf1,
      0x54,
      0x30,
      0x0f,
      0x06,
      0x03,
      0x55,
      0x1d,
      0x13,
      0x01,
      0x01,
      0xff,
      0x04,
      0x05,
      0x30,
      0x03,
      0x01,
      0x01,
      0xff,
      0x30,
      0x0e,
      0x06,
      0x03,
      0x55,
      0x1d,
      0x0f,
      0x01,
      0x01,
      0xff,
      0x04,
      0x04,
      0x03,
      0x02,
      0x01,
      0x06,
      0x30,
      0x0a,
      0x06,
      0x08,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x04,
      0x03,
      0x02,
      0x03,
      0x48,
      0x00,
      0x30,
      0x45,
      0x02,
      0x21,
      0x00,
      0xb7,
      0xb1,
      0x3d,
      0x65,
      0x06,
      0x31,
      0x9e,
      0x17,
      0xec,
      0x4a,
      0x4e,
      0x9c,
      0xd5,
      0xd4,
      0xa6,
      0x14,
      0xd9,
      0xc9,
      0x1a,
      0x85,
      0x37,
      0x78,
      0x98,
      0xb2,
      0x72,
      0xcd,
      0x83,
      0xa1,
      0x68,
      0x7b,
      0xf8,
      0x8a,
      0x02,
      0x20,
      0x0f,
      0x62,
      0x58,
      0x91,
      0xfc,
      0x87,
      0xe5,
      0x0e,
      0x01,
      0xa6,
      0x8f,
      0x2b,
      0xae,
      0x83,
      0xb4,
      0x22,
      0xde,
      0xe8,
      0x62,
      0x31,
      0x76,
      0x92,
      0x0c,
      0xbf,
      0x79,
      0x26,
      0x77,
      0x53,
      0xd1,
      0xa5,
      0x6a,
      0xac
    ]).buffer;

    assert.isTrue(abEqual(x5c[0], expectedX5c0), "x5c[0] has correct value");
    assert.isTrue(abEqual(x5c[1], expectedX5c1), "x5c[1] has correct value");
  });

  it("has attCert", function() {
    var attCert = ret.get("attCert");
    assert.instanceOf(attCert, ArrayBuffer);

    var expectedAttCert = new Uint8Array([
      0x30,
      0x82,
      0x02,
      0x41,
      0x30,
      0x82,
      0x01,
      0xe8,
      0xa0,
      0x03,
      0x02,
      0x01,
      0x02,
      0x02,
      0x10,
      0x15,
      0x9f,
      0x7b,
      0xc2,
      0xcd,
      0x89,
      0x18,
      0xf1,
      0x28,
      0x6b,
      0x93,
      0x48,
      0xfa,
      0x9f,
      0x33,
      0xe2,
      0x30,
      0x0a,
      0x06,
      0x08,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x04,
      0x03,
      0x02,
      0x30,
      0x49,
      0x31,
      0x0b,
      0x30,
      0x09,
      0x06,
      0x03,
      0x55,
      0x04,
      0x06,
      0x13,
      0x02,
      0x43,
      0x4e,
      0x31,
      0x1d,
      0x30,
      0x1b,
      0x06,
      0x03,
      0x55,
      0x04,
      0x0a,
      0x0c,
      0x14,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x54,
      0x65,
      0x63,
      0x68,
      0x6e,
      0x6f,
      0x6c,
      0x6f,
      0x67,
      0x69,
      0x65,
      0x73,
      0x31,
      0x1b,
      0x30,
      0x19,
      0x06,
      0x03,
      0x55,
      0x04,
      0x03,
      0x0c,
      0x12,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x46,
      0x49,
      0x44,
      0x4f,
      0x32,
      0x20,
      0x43,
      0x41,
      0x2d,
      0x31,
      0x30,
      0x20,
      0x17,
      0x0d,
      0x31,
      0x38,
      0x30,
      0x34,
      0x31,
      0x31,
      0x30,
      0x30,
      0x30,
      0x30,
      0x30,
      0x30,
      0x5a,
      0x18,
      0x0f,
      0x32,
      0x30,
      0x33,
      0x33,
      0x30,
      0x34,
      0x31,
      0x30,
      0x32,
      0x33,
      0x35,
      0x39,
      0x35,
      0x39,
      0x5a,
      0x30,
      0x6f,
      0x31,
      0x0b,
      0x30,
      0x09,
      0x06,
      0x03,
      0x55,
      0x04,
      0x06,
      0x13,
      0x02,
      0x43,
      0x4e,
      0x31,
      0x1d,
      0x30,
      0x1b,
      0x06,
      0x03,
      0x55,
      0x04,
      0x0a,
      0x0c,
      0x14,
      0x46,
      0x65,
      0x69,
      0x74,
      0x69,
      0x61,
      0x6e,
      0x20,
      0x54,
      0x65,
      0x63,
      0x68,
      0x6e,
      0x6f,
      0x6c,
      0x6f,
      0x67,
      0x69,
      0x65,
      0x73,
      0x31,
      0x22,
      0x30,
      0x20,
      0x06,
      0x03,
      0x55,
      0x04,
      0x0b,
      0x0c,
      0x19,
      0x41,
      0x75,
      0x74,
      0x68,
      0x65,
      0x6e,
      0x74,
      0x69,
      0x63,
      0x61,
      0x74,
      0x6f,
      0x72,
      0x20,
      0x41,
      0x74,
      0x74,
      0x65,
      0x73,
      0x74,
      0x61,
      0x74,
      0x69,
      0x6f,
      0x6e,
      0x31,
      0x1d,
      0x30,
      0x1b,
      0x06,
      0x03,
      0x55,
      0x04,
      0x03,
      0x0c,
      0x14,
      0x46,
      0x54,
      0x20,
      0x42,
      0x69,
      0x6f,
      0x50,
      0x61,
      0x73,
      0x73,
      0x20,
      0x46,
      0x49,
      0x44,
      0x4f,
      0x32,
      0x20,
      0x55,
      0x53,
      0x42,
      0x30,
      0x59,
      0x30,
      0x13,
      0x06,
      0x07,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x02,
      0x01,
      0x06,
      0x08,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x03,
      0x01,
      0x07,
      0x03,
      0x42,
      0x00,
      0x04,
      0x80,
      0x06,
      0x75,
      0x5c,
      0x59,
      0xfb,
      0xc9,
      0x49,
      0xb0,
      0x15,
      0xa8,
      0xd2,
      0x0a,
      0x92,
      0x58,
      0x97,
      0xbe,
      0x83,
      0x0a,
      0xb2,
      0xef,
      0xe8,
      0x2c,
      0xf8,
      0x8f,
      0xed,
      0xa0,
      0x90,
      0x96,
      0x63,
      0xe5,
      0x48,
      0xc7,
      0x1f,
      0x11,
      0x27,
      0x05,
      0x33,
      0xb4,
      0x24,
      0x46,
      0x78,
      0x9d,
      0x4c,
      0xfe,
      0xe1,
      0x01,
      0x43,
      0x8a,
      0x94,
      0xe9,
      0x83,
      0x3d,
      0xe2,
      0x00,
      0x2c,
      0x2f,
      0x2a,
      0x1d,
      0xd7,
      0x6f,
      0x4d,
      0xdb,
      0x5d,
      0xa3,
      0x81,
      0x89,
      0x30,
      0x81,
      0x86,
      0x30,
      0x1d,
      0x06,
      0x03,
      0x55,
      0x1d,
      0x0e,
      0x04,
      0x16,
      0x04,
      0x14,
      0x7a,
      0x54,
      0x82,
      0x42,
      0x80,
      0x62,
      0xd8,
      0x8a,
      0xe7,
      0xaf,
      0x84,
      0x98,
      0x25,
      0xc4,
      0xaf,
      0x91,
      0xa9,
      0x34,
      0x98,
      0xf2,
      0x30,
      0x1f,
      0x06,
      0x03,
      0x55,
      0x1d,
      0x23,
      0x04,
      0x18,
      0x30,
      0x16,
      0x80,
      0x14,
      0x4d,
      0x3b,
      0xd8,
      0xc4,
      0x67,
      0x15,
      0x1b,
      0xbb,
      0x13,
      0xe8,
      0xf3,
      0x84,
      0xd8,
      0x30,
      0x4f,
      0x9d,
      0x69,
      0x15,
      0xc0,
      0x83,
      0x30,
      0x0c,
      0x06,
      0x03,
      0x55,
      0x1d,
      0x13,
      0x01,
      0x01,
      0xff,
      0x04,
      0x02,
      0x30,
      0x00,
      0x30,
      0x13,
      0x06,
      0x0b,
      0x2b,
      0x06,
      0x01,
      0x04,
      0x01,
      0x82,
      0xe5,
      0x1c,
      0x02,
      0x01,
      0x01,
      0x04,
      0x04,
      0x03,
      0x02,
      0x05,
      0x20,
      0x30,
      0x21,
      0x06,
      0x0b,
      0x2b,
      0x06,
      0x01,
      0x04,
      0x01,
      0x82,
      0xe5,
      0x1c,
      0x01,
      0x01,
      0x04,
      0x04,
      0x12,
      0x04,
      0x10,
      0x42,
      0x38,
      0x32,
      0x45,
      0x44,
      0x37,
      0x33,
      0x43,
      0x38,
      0x46,
      0x42,
      0x34,
      0x45,
      0x35,
      0x41,
      0x32,
      0x30,
      0x0a,
      0x06,
      0x08,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x04,
      0x03,
      0x02,
      0x03,
      0x47,
      0x00,
      0x30,
      0x44,
      0x02,
      0x20,
      0x24,
      0x4b,
      0x45,
      0xa3,
      0xbe,
      0x88,
      0xdc,
      0xb7,
      0xe0,
      0x25,
      0xa2,
      0xc6,
      0xa3,
      0x12,
      0xcf,
      0xfb,
      0x86,
      0xed,
      0xbc,
      0x27,
      0x4a,
      0x22,
      0xc1,
      0x05,
      0x2e,
      0x31,
      0x48,
      0x51,
      0xf0,
      0xe8,
      0xb0,
      0x87,
      0x02,
      0x20,
      0x34,
      0x1a,
      0xbf,
      0x4e,
      0x1c,
      0x24,
      0xf2,
      0x0b,
      0x1a,
      0x73,
      0xd5,
      0x3d,
      0xac,
      0xc2,
      0xa9,
      0xf9,
      0x15,
      0xb4,
      0x1b,
      0xb2,
      0x3a,
      0x6b,
      0x01,
      0x6f,
      0x1f,
      0xef,
      0xf8,
      0xe0,
      0xe7,
      0xf8,
      0x90,
      0xc0
    ]).buffer;

    assert.isTrue(
      abEqual(attCert, expectedAttCert),
      "attCert has correct value"
    );
  });

  it("has sig", function() {
    var sig = ret.get("sig");
    assert.instanceOf(sig, ArrayBuffer);

    var expectedSig = new Uint8Array([
      0x30,
      0x46,
      0x02,
      0x21,
      0x00,
      0x8b,
      0x0a,
      0xd1,
      0x6a,
      0xfd,
      0xb6,
      0x6b,
      0x9d,
      0xfb,
      0x06,
      0x88,
      0x62,
      0x84,
      0x30,
      0xdb,
      0x45,
      0x16,
      0x8b,
      0xb0,
      0xcb,
      0xfe,
      0x00,
      0xf1,
      0xfc,
      0xf3,
      0x46,
      0xdc,
      0xf0,
      0x79,
      0xed,
      0xe1,
      0xcb,
      0x02,
      0x21,
      0x00,
      0xb5,
      0x1c,
      0x9d,
      0xfb,
      0x82,
      0x48,
      0xda,
      0x90,
      0x95,
      0x5f,
      0xe7,
      0x43,
      0xcf,
      0x89,
      0x9b,
      0x1d,
      0xcf,
      0xc0,
      0x92,
      0xf0,
      0xb7,
      0x77,
      0xfe,
      0x2a,
      0x9c,
      0x10,
      0x5a,
      0xde,
      0x7d,
      0x88,
      0xfe,
      0x15
    ]).buffer;

    assert.isTrue(abEqual(sig, expectedSig), "sig has correct value");
  });

  it("has correct raw authnrData", function() {
    var rawAuthnrData = ret.get("rawAuthnrData");
    assert.instanceOf(rawAuthnrData, ArrayBuffer);
    assert.strictEqual(rawAuthnrData.byteLength, 228);

    var expectedRawAuthnrData = new Uint8Array([
      0x95,
      0x69,
      0x08,
      0x8f,
      0x1e,
      0xce,
      0xe3,
      0x23,
      0x29,
      0x54,
      0x03,
      0x5d,
      0xbd,
      0x10,
      0xd7,
      0xca,
      0xe3,
      0x91,
      0x30,
      0x5a,
      0x27,
      0x51,
      0xb5,
      0x59,
      0xbb,
      0x8f,
      0xd7,
      0xcb,
      0xb2,
      0x29,
      0xbd,
      0xd4,
      0x41,
      0x00,
      0x00,
      0x00,
      0x01,
      0x42,
      0x38,
      0x32,
      0x45,
      0x44,
      0x37,
      0x33,
      0x43,
      0x38,
      0x46,
      0x42,
      0x34,
      0x45,
      0x35,
      0x41,
      0x32,
      0x00,
      0x60,
      0xb0,
      0xbd,
      0xfd,
      0x00,
      0xfc,
      0x93,
      0x9a,
      0x2b,
      0x2b,
      0x8e,
      0x1d,
      0x75,
      0xbe,
      0x08,
      0x5a,
      0xa8,
      0xd7,
      0xee,
      0xae,
      0xe2,
      0xd0,
      0x98,
      0x27,
      0xd1,
      0xd1,
      0xcd,
      0x6b,
      0xc8,
      0xab,
      0x5a,
      0x43,
      0xcd,
      0x63,
      0x90,
      0x48,
      0x4d,
      0x6b,
      0x9b,
      0xbd,
      0xc4,
      0xb4,
      0xe7,
      0x92,
      0x26,
      0xef,
      0x5c,
      0x2f,
      0x58,
      0xa7,
      0x30,
      0x4b,
      0x17,
      0x05,
      0x84,
      0x67,
      0x79,
      0x3d,
      0x09,
      0x1f,
      0xec,
      0xc7,
      0x39,
      0xbf,
      0xa5,
      0x66,
      0x1b,
      0x04,
      0xeb,
      0x4a,
      0xc5,
      0xe6,
      0x6e,
      0xf7,
      0x3d,
      0x86,
      0x4f,
      0xc6,
      0xfa,
      0x41,
      0x6e,
      0x22,
      0x42,
      0xf4,
      0x65,
      0xca,
      0xe9,
      0x82,
      0x4f,
      0x7a,
      0x04,
      0x37,
      0x1f,
      0xfc,
      0xe3,
      0x4d,
      0x6b,
      0xa5,
      0x01,
      0x02,
      0x03,
      0x26,
      0x20,
      0x01,
      0x21,
      0x58,
      0x20,
      0x59,
      0x1d,
      0xc1,
      0xe1,
      0x04,
      0xea,
      0x65,
      0xa2,
      0x20,
      0x06,
      0x0f,
      0x0e,
      0x82,
      0xb3,
      0xdf,
      0xcf,
      0x35,
      0x02,
      0x86,
      0xb8,
      0xb2,
      0x7f,
      0x33,
      0x91,
      0x39,
      0xb4,
      0x68,
      0xf2,
      0x8a,
      0x60,
      0x1b,
      0xdd,
      0x22,
      0x58,
      0x20,
      0xb6,
      0x51,
      0xb7,
      0xda,
      0x5c,
      0x6b,
      0x6a,
      0x78,
      0x3c,
      0x33,
      0x4b,
      0x68,
      0x8d,
      0x82,
      0x77,
      0xe8,
      0x22,
      0xf5,
      0x54,
      0xcb,
      0xf6,
      0xa5,
      0x94,
      0xb3,
      0xa9,
      0x1f,
      0xcd,
      0x7e,
      0xf1,
      0xbc,
      0xf1,
      0xb0
    ]).buffer;
    assert.isTrue(
      abEqual(rawAuthnrData, expectedRawAuthnrData),
      "rawAuthnrData has correct value"
    );
  });

  it("has correct rpIdHash", function() {
    var rpIdHash = ret.get("rpIdHash");
    assert.instanceOf(rpIdHash, ArrayBuffer);
    assert.strictEqual(rpIdHash.byteLength, 32);

    var expectedRpIdHash = new Uint8Array([
      0x95,
      0x69,
      0x08,
      0x8f,
      0x1e,
      0xce,
      0xe3,
      0x23,
      0x29,
      0x54,
      0x03,
      0x5d,
      0xbd,
      0x10,
      0xd7,
      0xca,
      0xe3,
      0x91,
      0x30,
      0x5a,
      0x27,
      0x51,
      0xb5,
      0x59,
      0xbb,
      0x8f,
      0xd7,
      0xcb,
      0xb2,
      0x29,
      0xbd,
      0xd4
    ]).buffer;
    assert.isTrue(
      abEqual(rpIdHash, expectedRpIdHash),
      "rpIdHash has correct value"
    );
  });

  it("has correct flags", function() {
    var flags = ret.get("flags");
    assert.instanceOf(flags, Set);
    assert.strictEqual(flags.size, 2);
    assert.isTrue(flags.has("AT"));
    assert.isTrue(flags.has("UP"));
  });

  it("has correct counter", function() {
    var counter = ret.get("counter");
    assert.isNumber(counter);
    assert.strictEqual(counter, 1);
  });

  it("has correct aaguid", function() {
    var aaguid = ret.get("aaguid");
    assert.instanceOf(aaguid, ArrayBuffer);
    assert.strictEqual(aaguid.byteLength, 16);

    var expectedAaguid = new Uint8Array([
      0x42,
      0x38,
      0x32,
      0x45,
      0x44,
      0x37,
      0x33,
      0x43,
      0x38,
      0x46,
      0x42,
      0x34,
      0x45,
      0x35,
      0x41,
      0x32
    ]).buffer;
    assert.isTrue(abEqual(aaguid, expectedAaguid), "aaguid has correct value");
  });

  it("has correct credIdLen", function() {
    var credIdLen = ret.get("credIdLen");
    assert.isNumber(credIdLen);
    assert.strictEqual(credIdLen, 96);
  });

  it("has correct credentialPublicKeyCose", function() {
    var credentialPublicKeyCose = ret.get("credentialPublicKeyCose");
    assert.instanceOf(credentialPublicKeyCose, ArrayBuffer);
    assert.strictEqual(credentialPublicKeyCose.byteLength, 77);

    var expectedCredentialPublicKeyCose = new Uint8Array([
      0xa5,
      0x01,
      0x02,
      0x03,
      0x26,
      0x20,
      0x01,
      0x21,
      0x58,
      0x20,
      0x59,
      0x1d,
      0xc1,
      0xe1,
      0x04,
      0xea,
      0x65,
      0xa2,
      0x20,
      0x06,
      0x0f,
      0x0e,
      0x82,
      0xb3,
      0xdf,
      0xcf,
      0x35,
      0x02,
      0x86,
      0xb8,
      0xb2,
      0x7f,
      0x33,
      0x91,
      0x39,
      0xb4,
      0x68,
      0xf2,
      0x8a,
      0x60,
      0x1b,
      0xdd,
      0x22,
      0x58,
      0x20,
      0xb6,
      0x51,
      0xb7,
      0xda,
      0x5c,
      0x6b,
      0x6a,
      0x78,
      0x3c,
      0x33,
      0x4b,
      0x68,
      0x8d,
      0x82,
      0x77,
      0xe8,
      0x22,
      0xf5,
      0x54,
      0xcb,
      0xf6,
      0xa5,
      0x94,
      0xb3,
      0xa9,
      0x1f,
      0xcd,
      0x7e,
      0xf1,
      0xbc,
      0xf1,
      0xb0
    ]).buffer;
    assert.isTrue(
      abEqual(credentialPublicKeyCose, expectedCredentialPublicKeyCose),
      "credentialPublicKeyCose has correct value"
    );
  });
});
