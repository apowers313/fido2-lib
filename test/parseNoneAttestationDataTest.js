"use strict";

const parser = require("../lib/parser");
var assert = require("chai").assert;
const h = require("fido2-helpers");

describe("parseAttestationObject (none)", function() {
  it("parser is object", function() {
    assert.isObject(parser);
  });

  it("correctly parses 'none' format", function() {
    var ret = parser.parseAttestationObject(
      h.lib.makeCredentialAttestationNoneResponse.response.attestationObject
    );
    assert.instanceOf(ret, Map);
    assert.strictEqual(ret.size, 11);
    // attStmt
    // var attStmt = ret.get("attStmt");
    // assert.isObject(attStmt);
    // assert.strictEqual(Object.keys(attStmt).length, 0);
    // assert.deepEqual(attStmt, {});
    // fmt
    var fmt = ret.get("fmt");
    assert.strictEqual(fmt, "none");
    // got the right authData CBOR
    var rawAuthnrData = ret.get("rawAuthnrData");
    assert.instanceOf(rawAuthnrData, ArrayBuffer);
    var expectedRawAuthnrData = new Uint8Array([
      0x49,
      0x96,
      0x0d,
      0xe5,
      0x88,
      0x0e,
      0x8c,
      0x68,
      0x74,
      0x34,
      0x17,
      0x0f,
      0x64,
      0x76,
      0x60,
      0x5b,
      0x8f,
      0xe4,
      0xae,
      0xb9,
      0xa2,
      0x86,
      0x32,
      0xc7,
      0x99,
      0x5c,
      0xf3,
      0xba,
      0x83,
      0x1d,
      0x97,
      0x63,
      0x41,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0xa2,
      0x00,
      0x08,
      0xa2,
      0xdd,
      0x5e,
      0xac,
      0x1a,
      0x86,
      0xa8,
      0xcd,
      0x6e,
      0xd3,
      0x6c,
      0xd6,
      0x98,
      0x94,
      0x96,
      0x89,
      0xe5,
      0xba,
      0xfc,
      0x4e,
      0xb0,
      0x5f,
      0x45,
      0x79,
      0xe8,
      0x7d,
      0x93,
      0xba,
      0x97,
      0x6b,
      0x2e,
      0x73,
      0x76,
      0xb9,
      0xb6,
      0xdf,
      0xd7,
      0x16,
      0xe1,
      0x64,
      0x14,
      0x0f,
      0xf9,
      0x79,
      0xa6,
      0xd4,
      0xf3,
      0x44,
      0xb5,
      0x3d,
      0x6d,
      0x26,
      0xe0,
      0x86,
      0x7b,
      0xf4,
      0x14,
      0xb6,
      0x91,
      0x03,
      0xbb,
      0x65,
      0xcb,
      0xb2,
      0xda,
      0xf7,
      0xf4,
      0x11,
      0x28,
      0x35,
      0xf0,
      0x64,
      0xcb,
      0x1b,
      0x59,
      0xa8,
      0xe5,
      0x84,
      0xa4,
      0x21,
      0xda,
      0x8b,
      0xd8,
      0x9e,
      0x38,
      0x7a,
      0x0b,
      0x7e,
      0xea,
      0xb7,
      0x23,
      0xec,
      0xd7,
      0x9d,
      0x48,
      0x4c,
      0x31,
      0x6b,
      0xfb,
      0xae,
      0xc5,
      0x46,
      0x01,
      0xb4,
      0x73,
      0x67,
      0x49,
      0x0a,
      0x83,
      0x9a,
      0xda,
      0x14,
      0x01,
      0xf3,
      0x3d,
      0x2d,
      0x25,
      0x8b,
      0x97,
      0xae,
      0x41,
      0x8c,
      0xa5,
      0x59,
      0x34,
      0x65,
      0x29,
      0xf5,
      0xaa,
      0x37,
      0xde,
      0x63,
      0x12,
      0x75,
      0x57,
      0xd0,
      0x43,
      0x46,
      0xc7,
      0xcd,
      0xee,
      0xbd,
      0x25,
      0x54,
      0x2f,
      0x2c,
      0x17,
      0xfc,
      0x39,
      0x38,
      0x99,
      0x52,
      0xa2,
      0x6c,
      0x3a,
      0xe2,
      0xa6,
      0xa6,
      0xa5,
      0x1c,
      0xa5,
      0x01,
      0x02,
      0x03,
      0x26,
      0x20,
      0x01,
      0x21,
      0x58,
      0x20,
      0xbb,
      0x11,
      0xcd,
      0xdd,
      0x6e,
      0x9e,
      0x86,
      0x9d,
      0x15,
      0x59,
      0x72,
      0x9a,
      0x30,
      0xd8,
      0x9e,
      0xd4,
      0x9f,
      0x36,
      0x31,
      0x52,
      0x42,
      0x15,
      0x96,
      0x12,
      0x71,
      0xab,
      0xbb,
      0xe2,
      0x8d,
      0x7b,
      0x73,
      0x1f,
      0x22,
      0x58,
      0x20,
      0xdb,
      0xd6,
      0x39,
      0x13,
      0x2e,
      0x2e,
      0xe5,
      0x61,
      0x96,
      0x5b,
      0x83,
      0x05,
      0x30,
      0xa6,
      0xa0,
      0x24,
      0xf1,
      0x09,
      0x88,
      0x88,
      0xf3,
      0x13,
      0x55,
      0x05,
      0x15,
      0x92,
      0x11,
      0x84,
      0xc8,
      0x6a,
      0xca,
      0xc3
    ]).buffer;
    assert(
      h.functions.arrayBufferEquals(rawAuthnrData, expectedRawAuthnrData),
      "authData contains right bytes"
    );
    // parsed the authData CBOR correctly
    // var authData = ret.get("authData");
    // assert.isObject(authData);
    // assert.strictEqual(Object.keys(authData).length, 8);
    var rpIdHash = ret.get("rpIdHash");
    var expectedRpIdHash = new Uint8Array([
      0x49,
      0x96,
      0x0d,
      0xe5,
      0x88,
      0x0e,
      0x8c,
      0x68,
      0x74,
      0x34,
      0x17,
      0x0f,
      0x64,
      0x76,
      0x60,
      0x5b,
      0x8f,
      0xe4,
      0xae,
      0xb9,
      0xa2,
      0x86,
      0x32,
      0xc7,
      0x99,
      0x5c,
      0xf3,
      0xba,
      0x83,
      0x1d,
      0x97,
      0x63
    ]).buffer;
    assert(
      h.functions.arrayBufferEquals(rpIdHash, expectedRpIdHash),
      "correct rpIdHash"
    );
    // flags
    var flags = ret.get("flags");
    assert.instanceOf(flags, Set);
    assert.strictEqual(flags.size, 2);
    assert.isTrue(flags.has("UP"));
    assert.isTrue(flags.has("AT"));
    // counter
    assert.strictEqual(ret.get("counter"), 0);
    assert.isNumber(ret.get("counter"));
    // aaguid
    var aaguid = ret.get("aaguid");
    assert.instanceOf(aaguid, ArrayBuffer);
    var expectedAaguid = new Uint8Array([
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00
    ]).buffer;
    assert(
      h.functions.arrayBufferEquals(aaguid, expectedAaguid),
      "correct aaguid"
    );
    // credIdLen
    assert.strictEqual(ret.get("credIdLen"), 162);
    // credId
    var credId = ret.get("credId");
    assert.instanceOf(credId, ArrayBuffer);
    var expectedCredId = new Uint8Array([
      0x00,
      0x08,
      0xa2,
      0xdd,
      0x5e,
      0xac,
      0x1a,
      0x86,
      0xa8,
      0xcd,
      0x6e,
      0xd3,
      0x6c,
      0xd6,
      0x98,
      0x94,
      0x96,
      0x89,
      0xe5,
      0xba,
      0xfc,
      0x4e,
      0xb0,
      0x5f,
      0x45,
      0x79,
      0xe8,
      0x7d,
      0x93,
      0xba,
      0x97,
      0x6b,
      0x2e,
      0x73,
      0x76,
      0xb9,
      0xb6,
      0xdf,
      0xd7,
      0x16,
      0xe1,
      0x64,
      0x14,
      0x0f,
      0xf9,
      0x79,
      0xa6,
      0xd4,
      0xf3,
      0x44,
      0xb5,
      0x3d,
      0x6d,
      0x26,
      0xe0,
      0x86,
      0x7b,
      0xf4,
      0x14,
      0xb6,
      0x91,
      0x03,
      0xbb,
      0x65,
      0xcb,
      0xb2,
      0xda,
      0xf7,
      0xf4,
      0x11,
      0x28,
      0x35,
      0xf0,
      0x64,
      0xcb,
      0x1b,
      0x59,
      0xa8,
      0xe5,
      0x84,
      0xa4,
      0x21,
      0xda,
      0x8b,
      0xd8,
      0x9e,
      0x38,
      0x7a,
      0x0b,
      0x7e,
      0xea,
      0xb7,
      0x23,
      0xec,
      0xd7,
      0x9d,
      0x48,
      0x4c,
      0x31,
      0x6b,
      0xfb,
      0xae,
      0xc5,
      0x46,
      0x01,
      0xb4,
      0x73,
      0x67,
      0x49,
      0x0a,
      0x83,
      0x9a,
      0xda,
      0x14,
      0x01,
      0xf3,
      0x3d,
      0x2d,
      0x25,
      0x8b,
      0x97,
      0xae,
      0x41,
      0x8c,
      0xa5,
      0x59,
      0x34,
      0x65,
      0x29,
      0xf5,
      0xaa,
      0x37,
      0xde,
      0x63,
      0x12,
      0x75,
      0x57,
      0xd0,
      0x43,
      0x46,
      0xc7,
      0xcd,
      0xee,
      0xbd,
      0x25,
      0x54,
      0x2f,
      0x2c,
      0x17,
      0xfc,
      0x39,
      0x38,
      0x99,
      0x52,
      0xa2,
      0x6c,
      0x3a,
      0xe2,
      0xa6,
      0xa6,
      0xa5,
      0x1c
    ]).buffer;
    assert(
      h.functions.arrayBufferEquals(credId, expectedCredId),
      "correct credId"
    );
    // credentialPublicKeyCose
    var credentialPublicKeyCose = ret.get("credentialPublicKeyCose");
    assert.instanceOf(credentialPublicKeyCose, ArrayBuffer);
    var expectedCredentialPublicKeyCose = new Uint8Array([
      0xa5,
      0x01,
      0x02,
      0x03,
      0x26,
      0x20,
      0x01,
      0x21,
      0x58,
      0x20,
      0xbb,
      0x11,
      0xcd,
      0xdd,
      0x6e,
      0x9e,
      0x86,
      0x9d,
      0x15,
      0x59,
      0x72,
      0x9a,
      0x30,
      0xd8,
      0x9e,
      0xd4,
      0x9f,
      0x36,
      0x31,
      0x52,
      0x42,
      0x15,
      0x96,
      0x12,
      0x71,
      0xab,
      0xbb,
      0xe2,
      0x8d,
      0x7b,
      0x73,
      0x1f,
      0x22,
      0x58,
      0x20,
      0xdb,
      0xd6,
      0x39,
      0x13,
      0x2e,
      0x2e,
      0xe5,
      0x61,
      0x96,
      0x5b,
      0x83,
      0x05,
      0x30,
      0xa6,
      0xa0,
      0x24,
      0xf1,
      0x09,
      0x88,
      0x88,
      0xf3,
      0x13,
      0x55,
      0x05,
      0x15,
      0x92,
      0x11,
      0x84,
      0xc8,
      0x6a,
      0xca,
      0xc3
    ]).buffer;
    assert(
      h.functions.arrayBufferEquals(
        credentialPublicKeyCose,
        expectedCredentialPublicKeyCose
      ),
      "correct credentialPublicKeyCose"
    );
    // credentialPublicKeyJwk
    var credentialPublicKeyJwk = ret.get("credentialPublicKeyJwk");
    assert.isObject(credentialPublicKeyJwk);
    assert.strictEqual(Object.keys(credentialPublicKeyJwk).length, 5);
    assert.strictEqual(credentialPublicKeyJwk.kty, "EC");
    assert.strictEqual(credentialPublicKeyJwk.crv, "P-256");
    assert.strictEqual(credentialPublicKeyJwk.alg, "ECDSA_w_SHA256");
    // assert.instanceOf(credentialPublicKeyJwk.x, ArrayBuffer);
    // var expectedX = new Uint8Array([
    //     0xBB, 0x11, 0xCD, 0xDD, 0x6E, 0x9E, 0x86, 0x9D, 0x15, 0x59, 0x72, 0x9A, 0x30, 0xD8, 0x9E, 0xD4,
    //     0x9F, 0x36, 0x31, 0x52, 0x42, 0x15, 0x96, 0x12, 0x71, 0xAB, 0xBB, 0xE2, 0x8D, 0x7B, 0x73, 0x1F
    // ]).buffer;
    // assert(h.functions.arrayBufferEquals(credentialPublicKeyJwk.x, expectedX), "correct 'x' in jwk");
    // assert.instanceOf(credentialPublicKeyJwk.y, ArrayBuffer);
    // var expectedY = new Uint8Array([
    //     0xDB, 0xD6, 0x39, 0x13, 0x2E, 0x2E, 0xE5, 0x61, 0x96, 0x5B, 0x83, 0x05, 0x30, 0xA6, 0xA0, 0x24,
    //     0xF1, 0x09, 0x88, 0x88, 0xF3, 0x13, 0x55, 0x05, 0x15, 0x92, 0x11, 0x84, 0xC8, 0x6A, 0xCA, 0xC3
    // ]).buffer;
    // assert(h.functions.arrayBufferEquals(credentialPublicKeyJwk.y, expectedY), "correct 'y' in jwk");
    assert.strictEqual(
      credentialPublicKeyJwk.x,
      "uxHN3W6ehp0VWXKaMNie1J82MVJCFZYScau74o17cx8="
    );
    assert.strictEqual(
      credentialPublicKeyJwk.y,
      "29Y5Ey4u5WGWW4MFMKagJPEJiIjzE1UFFZIRhMhqysM="
    );
    // credentialPublicKeyPem
    var credentialPublicKeyPem = ret.get("credentialPublicKeyPem");
    assert.isString(credentialPublicKeyPem);
    var expectedPem =
      "-----BEGIN PUBLIC KEY-----\n" +
      "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEuxHN3W6ehp0VWXKaMNie1J82MVJC\n" +
      "FZYScau74o17cx/b1jkTLi7lYZZbgwUwpqAk8QmIiPMTVQUVkhGEyGrKww==\n" +
      "-----END PUBLIC KEY-----\n";
    assert.strictEqual(credentialPublicKeyPem, expectedPem);
  });
});
